#@ load("@ytt:data", "data")

---
apiVersion: v1
kind: Secret
metadata:
  name: shared-vcluster-scripts
  namespace: #@ data.values.namespace
stringData:
  setup.sh: |
    #!/bin/bash
    set -x
    set -eo pipefail
    # Wait for service account token to be available.
    STATUS=1
    ATTEMPTS=0
    ROLLOUT_STATUS_CMD="kubectl get secret/$SESSION_NAME-token -n default --kubeconfig=/opt/shared-vcluster-config/config"
    until [ $STATUS -eq 0 ] || $ROLLOUT_STATUS_CMD || [ $ATTEMPTS -eq 12 ]; do
        sleep 5
        $ROLLOUT_STATUS_CMD
        STATUS=$?
        ATTEMPTS=$((ATTEMPTS + 1))
    done
    # Get the secret data in JSON format for processing.
    secret_data=$(kubectl get secret/$SESSION_NAME-token -n default -o json --kubeconfig=/opt/shared-vcluster-config/config)
    # Loop through each data item and save it to a separate file
    mkdir /tmp/shared-vcluster-files
    for key in $(echo "$secret_data" | jq -r '.data | keys[]'); do
        value=$(echo "$secret_data" | jq -r ".data[\"$key\"]" | base64 -d)
        echo "$value" > "/tmp/shared-vcluster-files/$key"
    done
    # Override the Kubernetes namespace to make that for user the default.
    echo "$SESSION_NAME" > /tmp/shared-vcluster-files/namespace
    # Generate the kubeconfig file.
    TOKEN_FILE="/tmp/shared-vcluster-files/token"
    CA_FILE="/tmp/shared-vcluster-files/ca.crt"
    NAMESPACE_FILE="/tmp/shared-vcluster-files/namespace"
    kubectl config set-cluster vcluster --certificate-authority $CA_FILE --embed-certs=true --server $KUBERNETES_API_URL
    kubectl config set-credentials vcluster --token=$(cat $TOKEN_FILE)
    kubectl config set-context vcluster --cluster vcluster --user vcluster --namespace=$SESSION_NAME
    kubectl config use-context vcluster
    cp $HOME/.kube/config /opt/vcluster-session-config/config
